#lang racket
(require "pixel.rkt")
(require "image.rkt")

(define img1 (image 2 2
                    (pixrgb-d 0 0 60 1 1 10)
                    (pixrgb-d 0 1 2 80 2 20)
                    (pixrgb-d 1 0 5 3 60 10)
                    (pixrgb-d 1 1 145 90 123  1)))

(define img2 (image 2 2
                  (pixbit-d 0 0 0 10)
                  (pixbit-d 0 1 1 20)
                  (pixbit-d 1 0 1 10)
                  (pixbit-d 1 1 0 255)))

(define img3 (imgRGB->imgHex img1))

(define img4 (image 2 3
                  (pixbit-d 0 0 0 10)
                  (pixbit-d 0 1 1 20)
                  (pixbit-d 1 0 1 10)
                  (pixbit-d 0 2 0 10)
                  (pixbit-d 1 2 1 10)
                  (pixbit-d 1 1 0 255)))

(define img5 (image 3 1
                  (pixrgb-d 0 0 10 20 30 10)
                  (pixrgb-d 1 0 40 50 60 20)
                  (pixrgb-d 2 0 80 90 100 10)))

;imprimir una representación string de las imagenes
(display "Las funciones se probarán con las imagenes\nImg1 (RGB): \n")
(display (image->string img1 pixrgb->string))

(display "\nImg2 (BIT): \n")
(display (image->string img2 pixbit->string))

(display "\nImg3 (HEX): \n")
(display (image->string img3 pixhex->string))
(display "\nImg4 (BIT): \n")
(display (image->string img4 pixbit->string))
(display "\nImg5 (RGB): \n")
(display (image->string img5 pixrgb->string))


(display "\n## Pertenencias:\n\n# Bitmap: \n")
(display "\nImg1: \n")
(bitmap? img1)
(display "\nImg2: \n")
(bitmap? img2)
(display "\nImg3: \n")
(bitmap? img3)

(display "\n# Pixmap: \n")
(display "\nImg1: \n")
(pixmap? img1)
(display "\nImg2: \n")
(pixmap? img2)
(display "\nImg3: \n")
(pixmap? img3)

(display "\n# Hexmap: \n")
(display "\nImg1: \n")
(hexmap? img1)
(display "\nImg2: \n")
(hexmap? img2)
(display "\nImg3: \n")
(hexmap? img3)

(display "\n# Compressed?: \n")
(display "\nImg1: \n")
(compressed? img1)
(display "\nImg2: \n")
(compressed? img2)
(display "\nImg3: \n")
(compressed? img3)

(display "\n## Flips: \n")
(display "\n# FlipH: \n")
(display "\nImg1: \n")
(display (image->string (flipH img1) pixrgb->string))
(display "\nImg2: \n")
(display (image->string (flipH img2) pixbit->string))
(display "\nImg3: \n")
(display (image->string (flipH img3) pixhex->string))

(display "\n# FlipV: \n")
(display "\nImg1: \n")
(display (image->string (flipV img1) pixrgb->string))
(display "\nImg2: \n")
(display (image->string (flipV img2) pixbit->string))
(display "\nImg3: \n")
(display (image->string (flipV img3) pixhex->string))

(display "\n## Crop: \n")
(display "\n# Img1, p1=0,0 p2=0,0 \n")
(display (image->string (crop img1 0 0 0 0) pixrgb->string))
(display "\n# Img2, p1=0,0 p2=0,1 \n")
(display (image->string (crop img2 0 0 0 1) pixbit->string))
(display "\n# Img3, p1=0,1 p2=1,1 \n")
(display (image->string (crop img3 0 1 1 1) pixhex->string))

(display "\n## imgRGB->imgHex:\n")
(display "\n# Img1 -> hex \n")
(display (image->string (imgRGB->imgHex img1) pixhex->string))
(display "\n# Crop img1, p1=0,0 p2=1,0 -> hex \n")
(display (image->string (imgRGB->imgHex (crop img1 0 0 1 0)) pixhex->string))
(display "\n# Img5 -> hex \n")
(display (image->string (imgRGB->imgHex img5) pixhex->string))

(display "\n\n## histogram: \n")
(display "\n# img1: \n")
(histogram img1)
(display "\n# img2: \n")
(histogram img2)
(display "\n# img3: \n")
(histogram img3)

(display "\n\n## rotate90: \n")
(display "\n# img1: \n")
(display (image->string (rotate90 img1) pixrgb->string))
(display "\n# img2: \n")
(display (image->string (rotate90 img2) pixbit->string))
(display "\n# img3: \n")
(display (image->string (rotate90 img3) pixhex->string))

(display "\n\n## compress: \n")
(display "\n# img1: \n")
(compress img1)
(display "\n# img2: \n")
(compress img2)
(display "\n# img3: \n")
(compress img3)
(display "\n# Compressed?: \n")
(display "\n# img1: \n")
(compressed? (compress img1))
(display "\n# img2: \n")
(compressed? (compress img2))
(display "\n# img3: \n")
(compressed? (compress img3))

(define img8 (compress img1))
(define img9 (compress img2))
(define img10 (compress img3))

(display "\n\n## edit: \n")
(display "\n\n# invertColorBit: \n")
(display "\n# img2: \n")
(display (image->string (edit invertColorBit img2) pixbit->string))
(display "\n# crop img2 p1=0,0 p2=0,1: \n")
(display (image->string (edit invertColorBit (crop img2 0 0 0 1)) pixbit->string))
(display "\n# img4: \n")
(display (image->string (edit invertColorBit img4) pixbit->string))

(display "\n\n# invertColorRgb: \n")
(display "\n# img1: \n")
(display (image->string (edit invertColorRGB img1) pixrgb->string))
(display "\n# crop img1 p1=0,0 p2=0,1: \n")
(display (image->string (edit invertColorRGB (crop img1 0 0 0 1)) pixrgb->string))
(display "\n# img5: \n")
(display (image->string (edit invertColorRGB img5) pixrgb->string))

(display "\n\n# adjustChannel: \n")
(display "\n# img1, getR setR decCh: \n")
(display (image->string (edit (adjustChannel getR setR decCh) img1) pixrgb->string))
(display "\n# img1, getG setG decCh: \n")
(display (image->string (edit (adjustChannel getG setG decCh) img1) pixrgb->string))
(display "\n# img1, getB setB decCh: \n")
(display (image->string (edit (adjustChannel getB setB decCh) img1) pixrgb->string))

(display "\n\n## image->string: \n")
(display "\nImg1 (BIT): \n")
(display (image->string img1 pixrgb->string))
(display "\nImg2 (BIT): \n")
(display (image->string img2 pixbit->string))
(display "\nImg3 (HEX): \n")
(display (image->string img3 pixhex->string))

(display "\n\n## depthLayers: \n")
(display "\nImg1: \n")
(depthLayers img1)
(display "\nImg2: \n")
(depthLayers img2)
(display "\nImg3: \n")
(depthLayers img3)


(display "\n\n## decompress: (se comprimieron primero, luego se descomprimieron) \n")
(display "\nImg1: \n")
(decompress img8)
(display "\nImg2: \n")
(decompress img9)
(display "\nImg3: \n")
(decompress img10)

